package p5;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;

public class Cliente {
	/*
	 * Implementa una aplicación capaz de gestionar y llevar a cabo el intercambio de ficheros
	 * entre máquinas remotas. 
	 * Se trata de un híbrido entre arquitectura cliente-servidor y peer-to-peer, 
	 * es decir, el intercambio de ficheros se realiza directamente entre los propios clientes,
	 * y el servidor únicamente actúa proporcionando información acerca de qué ficheros
	 * hay disponibles en el sistema y quiénes son los propietarios.
	 *  
	 * Clase Cliente: Clase principal de la aplicación cliente. 
	 * Tendrá al menos los siguientes
	 * atributos: nombre de usuario, dirección ip de la máquina. Por comodidad, conviene
	 * tener también como atributos a los objetos que proporcionan la comunicación con el
	 * servidor (socket y flujos). Es responsable de llevar a cabo todas las comunicaciones
	 * con el servidor, y cuando sea necesario ejecutar el env´ıo o recepci´on de ficheros.
	 * Además ofrece el soporte para la interacci´on con el usuario del sistema.

	 * */
	
	private String nombre;
	private InetAddress ip;
	private Socket s;
	private BufferedReader tCliente;
	private PrintWriter fCliente;
	private Usuario usr;
	private String idCliente;
	
		public Cliente(){
		
	//	 Al iniciar la aplicación se pregunta al usuario por su nombre
		Scanner teclado=new Scanner(System.in);
		System.out.println("Cual es tu nombre de usuario?");
		nombre=teclado.nextLine();
		
		Usuario user=new Usuario(nombre);

		try {
			s= new Socket("ipServer", 999);//valores correctos?
			tCliente=new BufferedReader(new InputStreamReader(s.getInputStream()));
			fCliente=new PrintWriter(s.getOutputStream());
			MenuUsuario mU= new MenuUsuario(s);
			mU.start();
		} 
		catch (IOException e) {
			
			e.printStackTrace();
		}

		/* Al margen de la voluntad del usuario, el programa cliente puede actuar como emisor
		 * de cualquiera de sus archivos compartidos, como propietario de un fichero que otro
		 * cliente solicite. Esta acci´on ser´a llevada a cabo en un segundo plano permitiendo al
		 * usuario continuar con el uso normal de la aplicación.*/
		
		
	 /* Al terminar la aplicación se deberá comunicar el fin de sesión al servidor, 
	 * y permitir así que éste actualice apropiadamente su base de datos.*/
		 
		
	}

	

}
