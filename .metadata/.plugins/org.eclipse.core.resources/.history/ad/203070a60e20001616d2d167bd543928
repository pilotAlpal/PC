package p5;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Hashtable;
/*
 * Acciones básicas de la aplicación servidor:
 * 
 * Al iniciarse, leer´a de un fichero “users.txt” la informaci´on de los usuarios registrados
 * en el sistema y todos aquellos datos relativos a ´estos que se consideren oportunos.
 * 
 * El servidor atiende de forma concurrente todas las peticiones que realizan los clientes
 * conectados al sistema, en particular:
 * 
 *  • Solicitud de búsqueda de usuarios conectados: 
 *  El servidor realiza una búsqueda en su base de datos y devuelve los resultados obtenidos.
 *	• Solicitud de descarga de un fichero: El servidor se comunica con los dos clientes
	en cuesti´on, gestionando el inicio de la comunicaci´on p2p entre ellos. Una vez
	los clientes establecen conexi´on el servidor se desentiende de la comunicaci´on
	p2p.
	• Fin de sesi´on: Se actualiza apropiadamente la bases de datos (en realidad son
	estructuras de datos).
	
	Clase Servidor : Clase principal de la aplicaci´on servidor. Tendr´a como atributo
principal a una lista de usuarios (instancias de la clase Usuario). El servidor espera
la llegada de peticiones de inicio de sesi´on, y asocia un hilo de ejecuci´on con cada
usuario.

	El servidor tendrá una lista (tabla) con todos los usuarios registrados
 * en el sistema (instancias de la clase Usuario).

	Clase OyenteCliente: Implementa el interfaz “Runnable” o hereda de la clase “Thread”,
y es usada para proporcionar concurrencia respecto a las sesiones de cada
usuario con el servidor. El m´etodo “run()” se limita a hacer lecturas del flujo de
entrada correspondiente, realizar las acciones oportunas, y devolver los resultados
en forma de mensajes que ser´an enviados al usuario o usuarios involucrados.


 * */
public class Servidor {
	private InetAddress ipServer;
	private final int portServer=999;
	private ServerSocket listen;
	private BufferedReader fServer;
	private PrintWriter tServer;
	private Socket s;
	private Hashtable<String, InfoUsuario> tUsuarios;
	private Hashtable<String, String> tCanales ;
	public Servidor(){
		try {
			listen=new ServerSocket(portServer);
			ipServer=listen.getInetAddress();
			s = listen.accept();
			fServer=new BufferedReader(new InputStreamReader(s.getInputStream()));
			String st = fServer.readLine();//para que sirve este String?
			tServer = new PrintWriter(s.getOutputStream());
			tServer.println("Hola");
			while(true){
				s=listen.accept();
				(new OyenteCliente(s)).start();//con oyenteCliente runnable da fallo,por que?
			}
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public InetAddress getInetAdress(){
		return ipServer;
	}

}
